<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis01</title>
      <link href="/redis01.html"/>
      <url>/redis01.html</url>
      
        <content type="html"><![CDATA[<h1 id="redis客户端"><a href="#redis客户端" class="headerlink" title="redis客户端"></a><center>redis客户端</center></h1><h2 id="redis命令行客户端"><a href="#redis命令行客户端" class="headerlink" title="redis命令行客户端"></a>redis命令行客户端</h2><blockquote><p>redis-cli(Redis Command Line Interface)是Redis自带的基于命令行的Redis客户端，用于与服务端交互，可以使用该客户端来执行redis的各种命令。</p><h3 id="直接连接redis（默认ip127-0-0-1，端口6379）：-redis-cli"><a href="#直接连接redis（默认ip127-0-0-1，端口6379）：-redis-cli" class="headerlink" title="直接连接redis（默认ip127.0.0.1，端口6379）：./redis-cli"></a>直接连接redis（默认ip127.0.0.1，端口6379）：./redis-cli</h3><p><img src="https://ae01.alicdn.com/kf/HTB1Z1XYVZfpK1RjSZFO7616nFXaf.png" alt></p><h3 id="指定IP和端口连接redis：-redis-cli-h-127-0-0-1-p-6379"><a href="#指定IP和端口连接redis：-redis-cli-h-127-0-0-1-p-6379" class="headerlink" title="指定IP和端口连接redis：./redis-cli -h 127.0.0.1 -p 6379"></a>指定IP和端口连接redis：./redis-cli -h 127.0.0.1 -p 6379</h3><p><img src="https://ae01.alicdn.com/kf/HTB1EJtkoTZmx1VjSZFG761x2XXaD.png" alt></p></blockquote><h2 id="redis远程客户端"><a href="#redis远程客户端" class="headerlink" title="redis远程客户端"></a>redis远程客户端</h2><blockquote><p>Redis Desktop Manager<br>官网：<a href="https://redisdesktop.com/" target="_blank" rel="noopener">https://redisdesktop.com/</a><br>下载地址：<a href="https://github.com/uglide/RedisDesktopManager/releases/tag/0.8.8" target="_blank" rel="noopener">Redis Desktop Manager</a></p></blockquote><p>注意：远程连接redis需要修改redis的配置文件redis.conf</p><blockquote><p>1、将bind ip绑定ip注释掉，不然只能允许本机连接redis<br>2、protected-mode yes 保护模式改为no。（经过我的发现，其实在这里设置了no也是不管用的，后面有讲）<br><img src="https://ae01.alicdn.com/kf/HTB1YdhRVW6qK1RjSZFm7600PFXah.png" alt><br>3、设置redis的密码<br>找到requirepass字段设置密码<br><img src="https://ae01.alicdn.com/kf/HTB1AqXPVVzqK1RjSZFo762fcXXad.png" alt></p></blockquote><h2 id="redis编程客户端"><a href="#redis编程客户端" class="headerlink" title="redis编程客户端"></a>redis编程客户端</h2><blockquote><p>jedis，redis的Java编程客户端，redis官方首选推荐使用jedis，jedis是一个很小但很健全的redis的java客户端；jedis完全兼容redis2.8.X and 3.X.X<br>jedis源码：<a href="https://github.com/xetorthio/jedis" target="_blank" rel="noopener">https://github.com/xetorthio/jedis</a><br>jedis api：<a href="http://xetorthio.github.io/jedis/" target="_blank" rel="noopener">http://xetorthio.github.io/jedis/</a></p></blockquote><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><blockquote><p>问题描述：使用Redis Desktop Manager连接redis出现如下错误<br><img src="https://ae01.alicdn.com/kf/HTB1IUt5Xfvi21VjSZK9761AEpXaJ.png" alt></p></blockquote><blockquote><p>问题分析：在windows下使用telnet命令查看网络状态<br><img src="https://ae01.alicdn.com/kf/HTB1OYXOV3HqK1RjSZFg7617JXXay.png" alt><br><img src="https://ae01.alicdn.com/kf/HTB1jVJQVVzqK1RjSZFo762fcXXal.png" alt><br>结果是由于redis处于protected mode，导致无法连接，上面说了在redis的配置文件中已经禁用了protected mode，然而在连接redis还是报这个错。<br>注：如果使用telnet命令，出现不是内部或外部命令，也不是可运行的程序。可在控制面板-&gt;程序-&gt;启用或关闭windows功能-&gt;将telnet客户端勾选上即可。</p></blockquote><blockquote><p>问题解决<br>查看protected mode配置<br><img src="https://ae01.alicdn.com/kf/HTB1wD8RV9zqK1RjSZFp761kSXXal.png" alt><br>可以看到还是开启了protected mode，直接禁用即可<br><img src="https://ae01.alicdn.com/kf/HTB1BBVRVZbpK1RjSZFy760_qFXai.png" alt><br>当再次使用Redis Desktop Manager连接redis时，即可连接成功。<br><img src="https://ae01.alicdn.com/kf/HTB1tZegV4naK1RjSZFt762C2VXa5.png" alt></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>protected mode是redis3.2之后的添加的保护模式，官方解释</p><pre><code># Protected mode is a layer of security protection, in order to avoid that# Redis instances left open on the internet are accessed and exploited.## When protected mode is on and if:## 1) The server is not binding explicitly to a set of addresses using the#    &quot;bind&quot; directive.# 2) No password is configured.## The server only accepts connections from clients connecting from the# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain# sockets.## By default protected mode is enabled. You should disable it only if# you are sure you want clients from other hosts to connect to Redis# even if no authentication is configured, nor a specific set of interfaces# are explicitly listed using the &quot;bind&quot; directive.</code></pre><p>默认是开启protected mode，当开启时，需要配置密码，且只能接收127.0.0.1的主机访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/redis.html"/>
      <url>/redis.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下redis的安装和部署"><a href="#Linux下redis的安装和部署" class="headerlink" title="Linux下redis的安装和部署"></a><center>Linux下redis的安装和部署</center></h1><h2 id="什么是Redis？"><a href="#什么是Redis？" class="headerlink" title="什么是Redis？"></a>什么是Redis？</h2><blockquote><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p></blockquote><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><blockquote><p>1、从官网下载到压缩包：<a href="https://redis.io/download" target="_blank" rel="noopener">点击下载</a><br>2、通过远程管理工具xstp，将压缩包上传至linux服务器<br>3、将压缩包解压到/usr/local目录下：tar -zxvf redis-5.0.4.tar.gz -C /usr/local（注意：由于压缩包后缀为.tar.gz，所有需要gzip解压，对应z参数）<br>4、使用make命令进行编译，因为redis是c语言开发的，需要编译，编译需要gcc编译器（gcc是GNU compiler collection的缩写，它是linux下一个编译器集合，是c或c++程序的编译器）如果没有gcc编译器，需要使用yum -y install gcc安装gcc编译器。</p></blockquote><h2 id="Redis的目录结构"><a href="#Redis的目录结构" class="headerlink" title="Redis的目录结构"></a>Redis的目录结构</h2><p><img src="https://ae01.alicdn.com/kf/HTB1Fz4Thu3tHKVjSZSg7604QFXaY.png" alt><br>其中redis.conf为redis的配置文件，src目录下有启动和关闭redis的程序。</p><h2 id="Redis的启动和关闭"><a href="#Redis的启动和关闭" class="headerlink" title="Redis的启动和关闭"></a>Redis的启动和关闭</h2><h3 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h3><blockquote><p>切换到src目录下，执行./redis-server即可启动redis服务<br><img src="https://ae01.alicdn.com/kf/HTB1Mu7VUhTpK1RjSZFK7612wXXaV.png" alt><br>注意：这里执行./redis-server启动的redis服务，代表的是在前台启动redis服务，当你关闭当前会话时，即关闭了redis的服务。</p></blockquote><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><p>切换到src目录下，执行./redis-server &amp;即可在后台启动redis服务<br><img src="https://ae01.alicdn.com/kf/HTB1PagOUjDpK1RjSZFr76178VXaA.png" alt></p><h3 id="后台启动并输出日志到nohup-out"><a href="#后台启动并输出日志到nohup-out" class="headerlink" title="后台启动并输出日志到nohup.out"></a>后台启动并输出日志到nohup.out</h3><blockquote><p>使用nohup ./redis-server &amp;命令即可在后台启动redis服务，并创建日志文件nohup.out，用于保存redis的日志信息。日志文件nohup.out的输出路径可在redis的配置文件中设置。<br><img src="https://ae01.alicdn.com/kf/HTB1OUppUxnaK1RjSZFt762C2VXaN.png" alt></p></blockquote><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><blockquote><p>切换到src目录下，执行./redis-cli shutdown即可关闭redis服务<br><img src="https://ae01.alicdn.com/kf/HTB1n5U2UgHqK1RjSZFP763wapXaf.png" alt><br>也可使用kill直接杀死进程达到关闭redis服务的效果<br><img src="https://ae01.alicdn.com/kf/HTB1n5U2UgHqK1RjSZFP763wapXaf.png" alt></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git知识点总结</title>
      <link href="/gitTutorial.html"/>
      <url>/gitTutorial.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git知识点总结"><a href="#Git知识点总结" class="headerlink" title="Git知识点总结"></a><center>Git知识点总结</center></h1><h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><blockquote><p>版本控制是对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。【引用自百度百科】</p></blockquote><h2 id="版本控制应该具备哪些功能？"><a href="#版本控制应该具备哪些功能？" class="headerlink" title="版本控制应该具备哪些功能？"></a>版本控制应该具备哪些功能？</h2><p> 1.版本管理                                 </p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在保存每一个文件的时候做到不保存重复的数据，以便节约存储空间，这就是版本控制带来的好处，极大的提高了效率。</p></blockquote><p>2.数据备份</p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用版本控制不仅保存了当前文件的状态，还能够保存之前每一次提交过的记录。</p></blockquote><p>3.协同修改</p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多个人能并行不悖的修改服务器端的同一个文件。</p></blockquote><p>4.权限控制</p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;能对团队中参与开发的人员进行权限的控制。能对团队外的开发贡献者进行提交代码的审核，这是Git版本控制独有的。</p></blockquote><p>5.历史记录</p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;能查看某一文件的拥有者，修改文件时间，修改内容，日志信息；同时能讲本地文件恢复到某一个历史状态。</p></blockquote><p>6.分支管理</p><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许开发团队在工作中多个分支进行开发，进一步提高了效率。</p></blockquote><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源代码的版本控制软件。<br>官方网站：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p></blockquote><p></p><h4>Windows下安装Git</h4><br>&nbsp; &nbsp;&nbsp;从官网下载对应操作系统的Git，然后按默认选项安装即可。安装完成后，在任一目录下右键Git Bash here(前提是安装的时候选了这个选项)，就会弹出一个类似命令行的窗口，然后用git –version命令即可查看安装的Git版本。如下图所示<br><img src="https://ae01.alicdn.com/kf/HTB1gOFDRgDqK1RjSZSy761xEVXa9.png" alt><p></p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;版本库又可称为仓库(repository)，只需简单的一步操作，就可以将一个目录变为版本库，这个目录里的所有文件也就被git管理起来了，比如修改、删除文件，git都能够追踪历史记录。</p><ul><li>第一步<br>  &nbsp; &nbsp;&nbsp;选择一个合适的地方，创建一个空的目录<pre><code> mkdir hello</code></pre></li><li>第二步<br>  &nbsp; &nbsp;&nbsp;切换到创建的空目录下 <pre><code> cd hello</code></pre></li><li>第二步<br> &nbsp; &nbsp;&nbsp; 使用git init 命令初始化该目录为git管理的仓库<pre><code> git init</code></pre>这时候，仓库就创建起来了，该目录下有一个.git的目录，该目录是隐藏的，需要通过ll -a命令才能查看，-a参数代表列出所有的文件，包括隐藏文件，因为以.开头的文件都是隐藏文件；这个目录是Git用来跟踪和管理版本库的，默认是不允许修改里面的文件的。</li></ul><h2 id="工作区、版本库的概念"><a href="#工作区、版本库的概念" class="headerlink" title="工作区、版本库的概念"></a>工作区、版本库的概念</h2><h3 id="nbsp-nbsp-nbsp-工作区-Working-Directory"><a href="#nbsp-nbsp-nbsp-工作区-Working-Directory" class="headerlink" title="&nbsp; &nbsp;&nbsp;工作区(Working Directory)"></a>&nbsp; &nbsp;&nbsp;工作区(Working Directory)</h3><p> &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;工作区就是你能看到的目录，比如上面创建的hello目录，整个文件夹就是一个工作区，通俗来讲，写代码的地方就是工作区</p><h3 id="nbsp-nbsp-nbsp-版本库-Respository"><a href="#nbsp-nbsp-nbsp-版本库-Respository" class="headerlink" title="&nbsp; &nbsp;&nbsp;版本库(Respository)"></a>&nbsp; &nbsp;&nbsp;版本库(Respository)</h3><p> &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;工作区有一个隐藏的目录.git，上面已经介绍了这个目录是用来跟踪和管理版本库的。Git的版本库最重要的就是一个称为stage的暂存区，还有Git自动创建的master主分支，以及指向master的一个指针HEAD，用来表示当前版本。Git的回退与前进版本依靠的就是这个指针。</p><p> 下图展示了这三者之间的关系：<br> <img src="https://pic.superbed.cn/item/5cb483a53a213b04174c1218" alt></p><h3 id="nbsp-nbsp-nbsp-设置签名"><a href="#nbsp-nbsp-nbsp-设置签名" class="headerlink" title="&nbsp; &nbsp;&nbsp;设置签名"></a>&nbsp; &nbsp;&nbsp;设置签名</h3><p>  在此之前，我们可以设置签名，用来区分不同开发人员的身份。<br> 签名的格式<br> 用户名：xxx<br> Email地址：<a href="mailto:xxx@xx.xx" target="_blank" rel="noopener">xxx@xx.xx</a>(这里的Email地址可以是随便的，主要就是为了区别不同开发人员的身份)<br> 签名可以分为项目级别的签名和系统用户级别的签名。</p><ul><li><p>项目签名-仅在当前本地库范围内有效，在.gti目录下执行如下命令即可设置项目签名</p><pre><code>git config user.name xxxgit config user.email xxx@xx.xx</code></pre><p>项目签名的信息保存在.git/config所在文件中。</p></li><li><p>系统用户签名-登录当前操作系统的用户范围</p><pre><code>git config --global user.name xxxgit config --global user.email xxx@xx.xx</code></pre><p>系统用户签名的信息保存在~/.gitconfig<br>总结：以上必须至少配置一个签名，如果两个签名都配置了，则采用就近原则，采用的是项目级别的签名。</p><p>通过以上签名的配置，只需要简单的两步就可以把文件添加到Git版本库里</p></li></ul><ol><li>用git add把文件添加到暂存区。</li><li>用git commit提交更改，实际就是将暂存区里所作了修改而未曾提交过的文件提交到当前分支。<br>注意：Git自动为我们创建了主分支master，git commit 就是往该主分支里提交更改，当然你也可以新建其它的分支。</li></ol><h3 id="nbsp-nbsp-nbsp-实践"><a href="#nbsp-nbsp-nbsp-实践" class="headerlink" title="&nbsp; &nbsp;&nbsp;实践"></a>&nbsp; &nbsp;&nbsp;实践</h3><ol><li>新建一个test.txt，内容可以随便写。使用git status命令查看当前状态<br><img src="https://ae01.alicdn.com/kf/HTB1UNt1RkvoK1RjSZFw763iCFXaq.png" alt><br>表示有未追踪的文件test.txt，使用git add命令将文件提交到暂存区。查看一下状态。<br><img src="https://ae01.alicdn.com/kf/HTB1Pr4RRhTpK1RjSZFK7612wXXaX.png" alt><br>表示有可以提交的文件。当然你也可以使用git rm –cached firename命令来删除暂存区的内容。这里使用git commit命令将文件提交到本地库。提交时，必须带上提交该文件的描述，为了方便，可以带上参数-m，比如git commit -m “discription” firename<br><img src="https://ae01.alicdn.com/kf/HTB11ExJRgTqK1RjSZPh760fOFXaN.png" alt><br>表示提交成功了。<br>一旦提交成功后，如果工作区没有任何修改的文件，则工作区是干净的。<br><img src="https://ae01.alicdn.com/kf/HTB1Ypl4RhjaK1RjSZFA762dLFXaZ.png" alt></li></ol><p>总结：将文件提交到本地库只是两个命令，使用git add将工作区所作的工改提交到暂存区，使用git commit命令将暂存区所作的更改提交到本地库。</p><h3 id="nbsp-nbsp-nbsp-查看历史记录"><a href="#nbsp-nbsp-nbsp-查看历史记录" class="headerlink" title="&nbsp; &nbsp;&nbsp;查看历史记录"></a>&nbsp; &nbsp;&nbsp;查看历史记录</h3><p>提交到本地库后，我们就可以查看所提交以及前面所提交过的历史记录。<br>使用git log命令即可查看历史纪录，HEAD指针代表指向当前版本<br><img src="https://ae01.alicdn.com/kf/HTB1xFanRhjaK1RjSZKz760VwXXaf.png" alt><br>如果历史记录过多，可以使用如下方式控制查看。</p><ul><li>空格向下翻页</li><li>b向上翻页</li><li>q退出</li></ul><p>git log命令还可以带上参数进行查看。<br>git log –pretty=oneline<br><img src="https://ae01.alicdn.com/kf/HTB1hlFYRirpK1RjSZFh760SdXXaa.png" alt><br>git log –oneline<br><img src="https://ae01.alicdn.com/kf/HTB1.etPRmrqK1RjSZK9760yypXaV.png" alt><br>git reflog<br><img src="https://ae01.alicdn.com/kf/HTB1CKV4RXzqK1RjSZFC762bxVXaM.png" alt><br>注：HEAD@{移动到当前版本需要多少步}</p><h3 id="nbsp-nbsp-nbsp-版本的前进和后退"><a href="#nbsp-nbsp-nbsp-版本的前进和后退" class="headerlink" title="&nbsp; &nbsp;&nbsp;版本的前进和后退"></a>&nbsp; &nbsp;&nbsp;版本的前进和后退</h3><p>Git进行版本的前进和后退就是基于HEAD指针的，HEAD指针代表的是指向当前版本。有三种方法进行版本的前进和后退。</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于版本号"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于版本号" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于版本号"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于版本号</h4><p> &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git reset –hard [版本号]</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于-号"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于-号" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于^号"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于^号</h4><p>  &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git reset –hard HEAD^<br>  &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;注：一个^表示后退一步，依次类推</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于-号-1"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-基于-号-1" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于~号"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;基于~号</h4><p>   &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git reset –hard HEAD~n<br>   &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;注：表示后退n步</p><p>其实reset还有三个参数，分别为—hard、—soft、—mixed，下面是三个参数的区别：</p><ul><li>—mixed（这个是默认的参数）<br>  回退一个版本，且会将暂存区和已提交到本地库的内容全部恢复到未暂存的状态（即工作区的状态）</li><li>—soft<br> 回退一个版本，不清空暂存区，将已提交到本地库的内容恢复到暂存区</li><li>—hard<br> 回退一个版本，清空暂存区，将已提交的内容的版本恢复到本地，本地库的文件也将被恢复的版本所替换     </li></ul><h3 id="nbsp-nbsp-nbsp-其它操作"><a href="#nbsp-nbsp-nbsp-其它操作" class="headerlink" title="&nbsp; &nbsp;&nbsp;其它操作"></a>&nbsp; &nbsp;&nbsp;其它操作</h3><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-删除文件并找回"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-删除文件并找回" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除文件并找回"></a>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除文件并找回</h4><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前提：删除前，本地库必须存在该文件<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作：git reset –hard [指针位置]<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 删除操作已经提交到本地库：指针文职指向创建该文件的并提交过的历史记录<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除操作尚未提交到本地库，也就是在暂存区：指针位置指向HEAD。删除操作在暂存区，使用—hard参数，即可清空暂存区，也就是回到了创建文件已经提交过的那个历史记录了</p></blockquote><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-比较文件差异"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-比较文件差异" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较文件差异"></a>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较文件差异</h4><blockquote><p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git diff [文件名]—将工作区中的文件和暂存区的文件进行比较<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git diff [本地库历史版本][文件名]—将工作区中的文件和本地库历史记录比较。不带文件名比较的是多个文件</p></blockquote><h2 id="添加到远程库"><a href="#添加到远程库" class="headerlink" title="添加到远程库"></a>添加到远程库</h2><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;假设以上都正常完成后，本地库就存在了提交了的文件，现在需要在Github上创建一个Git仓库，用来测试两个仓库之间的远程同步。</p><h3 id="推送到远程库"><a href="#推送到远程库" class="headerlink" title="推送到远程库"></a>推送到远程库</h3><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;需要在Github上新建一个仓库，并且复制仓库的URL，推送操作需要仓库的URL，但是每次都要记住这么长的URL显然不是什么好事，Git提供了别名设置，使用git remote -v查看已设置的别名，使用git remote add [别名] [需要设置的名称]即可设置别名。</p><h4 id="推送操作-push"><a href="#推送操作-push" class="headerlink" title="推送操作(push)"></a>推送操作(push)</h4><pre><code>git push [URL/别名] [要推送的分支]比如：git push origin master(将主干推送到远程仓库)</code></pre><p>注：有时推送到远程库会报错，只需加上参数-f，强制推送即可。</p><pre><code>git push -f origin master</code></pre><h4 id="克隆操作-clone"><a href="#克隆操作-clone" class="headerlink" title="克隆操作(clone)"></a>克隆操作(clone)</h4><pre><code>git clone &lt;URL&gt;</code></pre><h4 id="拉取操作-pull"><a href="#拉取操作-pull" class="headerlink" title="拉取操作(pull)"></a>拉取操作(pull)</h4><pre><code>pull = fetch + mergegit fetch [远程库URL或远程库别名] [远程分支名]---》相当于从远程库获取最新版本到本地，并不会mergegit merge [远程库URL或远程库别名/远程库分支名]---》合并本地当前分支和远程库分支git pull [远程库URL或远程库别名] [远程分支名]---》相当于从远程库获取最新版本并merge到本地实际中，使用git fetch更保险一些，因为可以在merge前，可以查看当前清空，看是否需要进行合并。</code></pre><h4 id="补充：master、origin-master和origin-master的区别？"><a href="#补充：master、origin-master和origin-master的区别？" class="headerlink" title="补充：master、origin master和origin/master的区别？"></a>补充：master、origin master和origin/master的区别？</h4><blockquote><p>master就是git自动创建的主分支，名为master<br>origin master：前面的origin代表远程库名（已设置远程库的URL为origin），master代表远程分支名<br>origin/master：代表的是远程分支名，是从远程拉取代码在本地建立的一份拷贝</p></blockquote><p>以上面的命令来举例：<br>git fetch origin master：从名为origin的远程库拉取名为master的分支到本地，既然是拉取代码，显然要有URL和分支名。<br>git merge origin/master：合并名为origin/master的分支到当前分支，显然origin/master代表的就是远程分支名</p><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><h3 id="什么是分支？"><a href="#什么是分支？" class="headerlink" title="什么是分支？"></a>什么是分支？</h3><blockquote><p>在版本控制过程中，使用多个分支同时进行多个任务的开发。</p></blockquote><h3 id="分支的优势"><a href="#分支的优势" class="headerlink" title="分支的优势"></a>分支的优势</h3><blockquote><p>能同时进行多个功能的开发，提高效率；如果某个分支开发失败，并不影响其它分支。</p></blockquote><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-创建分支"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-创建分支" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;创建分支"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;创建分支</h4><blockquote><p>git默认创建了一个主分支master，用一个HEAD指针指向当前分支，git用master表示最新的提交。</p><pre><code>git branch [分支名]</code></pre></blockquote><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-查看分支"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-查看分支" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;查看分支"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;查看分支</h4><pre><code>git branch -v</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-切换分支"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-切换分支" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;切换分支"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;切换分支</h4><pre><code>git checkout [分支名]</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-合并分支"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-合并分支" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;合并分支"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;合并分支</h4><blockquote><p>第一步：切换到被合并的分支上</p><pre><code>git checkout [被合并的分支名]</code></pre><p>第二步：执行merge命令</p><pre><code>git merge [有新内容分支名]</code></pre></blockquote><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-解决冲突"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-解决冲突" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;解决冲突"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;解决冲突</h4><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-冲突的表现"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-冲突的表现" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;冲突的表现"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;冲突的表现</h5><blockquote><p>冲突就是当两个分支修改同一个文件的同一个地方，且修改的内容不一样，就会产生冲突。</p></blockquote><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-如何解决冲突"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-如何解决冲突" class="headerlink" title="&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何解决冲突"></a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何解决冲突</h5><blockquote><p>第一步：删除不必要的符号，比如分支信息<br>第二步：协同商量修改文件，保存退出<br>第三步：git add [文件名]<br>第四步：git commit -m “日志信息”<br>注：第四步不需要带文件名</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
